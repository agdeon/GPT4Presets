from user import User
import json
from telebot import types





class ButtonManager:
    """
        –°—Ç–∞—Ç–∏—á–Ω–æ–µ –º–µ–Ω—é
        üí¨ –û–±—ã—á–Ω—ã–π GPT
        üü¢ –í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        üìë –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ—Å–µ—Ç
        ‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç
        üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç
        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """

    # –í—Å–µ markup –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ emoji
    PRESET_INFO_BUTTON_ID = 'üí¨' # —É —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –±—É–¥–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ—Å–µ—Ç–∞

    ENABLE_CONTEXT_BUTTON_ID = 'üü¢' # –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—É–¥—É—Ç —Å–º–µ–Ω—è—Ç—å—Å—è –æ–¥–Ω–∞ –Ω–∞ –¥—Ä—É–≥—É—é
    ENABLE_CNTXT_B_TEXT = "–í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"

    DISABLE_CONTEXT_BUTTON_ID = 'üî¥' # –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—É–¥—É—Ç —Å–º–µ–Ω—è—Ç—å—Å—è –æ–¥–Ω–∞ –Ω–∞ –¥—Ä—É–≥—É—é
    DISABLE_CNTXT_B_TEXT = "–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"

    CHOOSE_PRESET_BUTTON_ID = 'üìë'
    CHOOSE_PRESET_B_TEXT = '–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ—Å–µ—Ç'

    CREATE_PRESET_BUTTON_ID = '‚ûï'
    CREATE_PRESET_B_TEXT = '–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç'

    REMOVE_PRESET_BUTTON_ID = 'üóëÔ∏è'
    REMOVE_PRESET_B_TEXT = '–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç'

    STAT_BUTTON_ID = 'üìä'
    STAT_B_TEXT = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'

    def __init__(self, user: User):
        self._user = user
        self._chat_id = user.id
        self._cfg_path = f"{User.USERS_FOLDER_NAME}/{self._user.user_folder_name}/{User.USER_CFG_FN}"

        self._ensure_active_preset()

    def create_menu(self) -> types.ReplyKeyboardMarkup:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton(f"{self.__class__.PRESET_INFO_BUTTON_ID} {self.get_active_preset_name()}")
        markup.row(button1)
        button2 = types.KeyboardButton(f"{self.__class__.ENABLE_CONTEXT_BUTTON_ID} {self.__class__.ENABLE_CNTXT_B_TEXT}")
        button3 = types.KeyboardButton(f"{self.__class__.CHOOSE_PRESET_BUTTON_ID} {self.__class__.CHOOSE_PRESET_B_TEXT}")
        button4 = types.KeyboardButton(f"{self.__class__.CREATE_PRESET_BUTTON_ID} {self.__class__.CREATE_PRESET_B_TEXT}")
        button5 = types.KeyboardButton(f"{self.__class__.REMOVE_PRESET_BUTTON_ID} {self.__class__.REMOVE_PRESET_B_TEXT}")
        button6 = types.KeyboardButton(f"{self.__class__.STAT_BUTTON_ID} {self.__class__.STAT_B_TEXT}")
        markup.add(button2, button3, button4, button5, button6)
        return markup

    def get_active_preset_name(self):
        active_preset = self.get_active_preset()
        self._user.info(f"get_active_preset_name(), active_preset= {active_preset}")
        first_key = next(iter(active_preset))
        self._user.info(f"get_active_preset_name(), first_key= {first_key}")
        return first_key

    def get_active_preset(self):
        self._user.info("_cfg_path = " + self._cfg_path)
        with open(self._cfg_path, 'r', encoding='utf-8') as file:
            cfg = json.load(file)
        preset = cfg.load("active_preset", None)
        self._user.info(f"preset = {preset}")
        if not preset:
            error_txt = "–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ _ensure_active_preset: –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç –ø—Ä–µ—Å–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            self._user.error(error_txt)
            raise Exception(error_txt)
        return preset

    def _ensure_active_preset(self):
        with open(self._cfg_path, 'r', encoding='utf-8') as file:
            cfg = json.load(file)
        active_preset = cfg.load("active_preset", None)

        if not active_preset:
            default_preset = cfg.load("default_preset", None)
            if not default_preset:
                error_txt = "–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ _ensure_active_preset: –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç –ø—Ä–µ—Å–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                self._user.error(error_txt)
                raise Exception(error_txt)

            cfg["active_preset"] = default_preset
            with open(self._cfg_path, 'w', encoding='utf-8') as config_file:
                json.dump(cfg, config_file, indent=4, ensure_ascii=False)

        # first_preset_name = _get_first_key_in_instruction_presets()
        # with open(self._cfg_path, 'w',
        #           encoding='utf-8') as config_file:
        #     json.dump(def_user_cfg, config_file, indent=4, ensure_ascii=False)
        # return first_preset_name


# –î–ª—è –ø—Ä—è–º—ã—Ö —Ç–µ—Å—Ç–æ–≤
if __name__ == '__main__':
    pass