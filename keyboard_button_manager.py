from user import User
from user_interaction_handler import UIHandler
import json
import telebot
from telebot import types
from user_interaction_handler import UserEvent


class KeyboardButton:
    def __init__(self, text, callback):
        self.text = text
        self.callback = callback


class KeyBoardButtonManager:
    """
        –°—Ç–∞—Ç–∏—á–Ω–æ–µ –º–µ–Ω—é
        üí¨ –û–±—ã—á–Ω—ã–π GPT
        üü¢ –í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        üìë –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ—Å–µ—Ç
        ‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç
        üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç
        üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    """

    # –í—Å–µ markup –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ emoji
    # PRESET_INFO_BUTTON_ID = 'üí¨' # —É —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –±—É–¥–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ—Å–µ—Ç–∞
    #
    # ENABLE_CONTEXT_BUTTON_ID = 'üü¢' # –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—É–¥—É—Ç —Å–º–µ–Ω—è—Ç—å—Å—è –æ–¥–Ω–∞ –Ω–∞ –¥—Ä—É–≥—É—é
    # ENABLE_CNTXT_B_TEXT = "–í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"
    #
    # DISABLE_CONTEXT_BUTTON_ID = 'üî¥' # –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—É–¥—É—Ç —Å–º–µ–Ω—è—Ç—å—Å—è –æ–¥–Ω–∞ –Ω–∞ –¥—Ä—É–≥—É—é
    # DISABLE_CNTXT_B_TEXT = "–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"
    #
    # CHOOSE_PRESET_BUTTON_ID = 'üìë'
    # CHOOSE_PRESET_B_TEXT = '–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ—Å–µ—Ç'
    #
    # CREATE_PRESET_BUTTON_ID = '‚ûï'
    # CREATE_PRESET_B_TEXT = '–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç'
    #
    # REMOVE_PRESET_BUTTON_ID = 'üóëÔ∏è'
    # REMOVE_PRESET_B_TEXT = '–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç'
    #
    # STAT_BUTTON_ID = 'üìä'
    # STAT_B_TEXT = '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'

    def __init__(self, bot_event: UserEvent):
        self.bot_event = bot_event
        self._chat_id = bot_event.message.chat.id



        # self.buttons = [
        #     KeyboardButton('üí¨', self.get_active_preset_name(), UIHandler.Command.show_preset_info),
        #     KeyboardButton('üü¢', '–í–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç', UIHandler.Command.enable_gpt_context)
        # ]

    def create_menu(self):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        preset_info_button = types.KeyboardButton(f"{self.buttons[0].id} {self.buttons[0].text}")
        markup.row(preset_info_button)
        # context_button = types.KeyboardButton(f"{self.buttons[0].id} {self.buttons[0].text}")
        self.bot.send_message(self.message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞", reply_markup=markup)


        # markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # button1 = types.KeyboardButton(f"{self.__class__.PRESET_INFO_BUTTON_ID} {self.get_active_preset_name()}")
        # markup.row(button1)
        # button2 = types.KeyboardButton(f"{self.__class__.CREATE_PRESET_BUTTON_ID} {self.__class__.CREATE_PRESET_B_TEXT}")
        # button3 = types.KeyboardButton(f"{self.__class__.CHOOSE_PRESET_BUTTON_ID} {self.__class__.CHOOSE_PRESET_B_TEXT}")
        # button4 = types.KeyboardButton(f"{self.__class__.REMOVE_PRESET_BUTTON_ID} {self.__class__.REMOVE_PRESET_B_TEXT}")
        # button5 = types.KeyboardButton(f"{self.__class__.ENABLE_CONTEXT_BUTTON_ID} {self.__class__.ENABLE_CNTXT_B_TEXT}")
        # button6 = types.KeyboardButton(f"{self.__class__.STAT_BUTTON_ID} {self.__class__.STAT_B_TEXT}")
        # markup.add(button2, button3, button4, button5, button6)

    def handle_keyboard_event(self):
        for button in self.buttons:
            if button.id == self.message.text.split()[0]:
                button.callback(self.bot_event)

    def is_keyboard_event(self):
        msg_txt = self.message.text
        if not msg_txt or ' ' not in msg_txt:
            return False
        possible_button = self.message.text.split()[0]
        for button in self.buttons:
            if button.id.strip() == possible_button.strip():
                return True


    def get_active_preset_name(self):
        active_preset = self.user.config.load()["active_preset"]
        return next(iter(active_preset))


# –î–ª—è –ø—Ä—è–º—ã—Ö —Ç–µ—Å—Ç–æ–≤
if __name__ == '__main__':
    pass
